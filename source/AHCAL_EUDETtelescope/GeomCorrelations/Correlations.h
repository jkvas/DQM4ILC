 /// \file AHCALRawModuleGlobal.h
/*
 *
 *-------------------------------------------------------------
 * AHCALRawModuleChannel.cc source template automatically modified from 
 * CaloHitModule  generated by a class generator
 * by A. Irles, DESY, 23 March 2016
 *--------------------------------------------------------------
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#ifndef Correlations_H
#define Correlations_H

#include "dqm4hep/DQMAnalysisModule.h"

namespace dqm4hep
{

class DQMMonitorElement;

/** Correlations class
 */ 
class Correlations : public DQMAnalysisModule
{
public:
	Correlations();
	~Correlations();

	StatusCode initModule();
	StatusCode readSettings(const TiXmlHandle xmlHandle);
	StatusCode processEvent(DQMEvent *pEvent);
	StatusCode startOfCycle();
	StatusCode endOfCycle();
	StatusCode startOfRun(DQMRun *pRun);
	StatusCode endOfRun(DQMRun *pRun);
	StatusCode endModule();

        StatusCode buildGeometryMap(const TiXmlHandle xmlHandle);
        int electronicsToIJK(int Chip, int Channel);
        int IJKToElectronics(int I, int J, int K);

	StatusCode buildHotPixelsMap(const TiXmlHandle xmlHandle);

protected:



	// ###########################################################################3
	// time plots

	// 2D- X - I/J MIP hitmaps
        DQMMonitorElementPtr                        m_pLDA_TLU_Offset;
	DQMMonitorElementPtr                        m_pTriggerID;
	DQMMonitorElementPtr                        m_pTimeCycle;
	DQMMonitorElementPtr                        m_pCorrelatedBXID;

	// maps

	// 2D- X - I/J MIP hitmaps
        DQMMonitorElementPtr                        m_pX_I_300_l01;
	DQMMonitorElementPtr                        m_pX_I_300_l02;
        DQMMonitorElementPtr                        m_pX_I_300_l03;
        DQMMonitorElementPtr                        m_pX_I_300_l04;
        DQMMonitorElementPtr                        m_pX_I_300_l05;
        DQMMonitorElementPtr                        m_pX_I_300_l06;
        DQMMonitorElementPtr                        m_pX_J_300_l01;
	DQMMonitorElementPtr                        m_pX_J_300_l02;
        DQMMonitorElementPtr                        m_pX_J_300_l03;
        DQMMonitorElementPtr                        m_pX_J_300_l04;
        DQMMonitorElementPtr                        m_pX_J_300_l05;
        DQMMonitorElementPtr                        m_pX_J_300_l06;


	// 2D- Y - I/J MIP hitmaps
        DQMMonitorElementPtr                        m_pY_I_300_l01;
	DQMMonitorElementPtr                        m_pY_I_300_l02;
        DQMMonitorElementPtr                        m_pY_I_300_l03;
        DQMMonitorElementPtr                        m_pY_I_300_l04;
        DQMMonitorElementPtr                        m_pY_I_300_l05;
        DQMMonitorElementPtr                        m_pY_I_300_l06;
        DQMMonitorElementPtr                        m_pY_J_300_l01;
	DQMMonitorElementPtr                        m_pY_J_300_l02;
        DQMMonitorElementPtr                        m_pY_J_300_l03;
        DQMMonitorElementPtr                        m_pY_J_300_l04;
        DQMMonitorElementPtr                        m_pY_J_300_l05;
        DQMMonitorElementPtr                        m_pY_J_300_l06;

	// 2D- X - I/J MIP hitmaps
        DQMMonitorElementPtr                        m_pX_noC_I_300_l01;
	DQMMonitorElementPtr                        m_pX_noC_I_300_l02;
        DQMMonitorElementPtr                        m_pX_noC_I_300_l03;
        DQMMonitorElementPtr                        m_pX_noC_I_300_l04;
        DQMMonitorElementPtr                        m_pX_noC_I_300_l05;
        DQMMonitorElementPtr                        m_pX_noC_I_300_l06;
        DQMMonitorElementPtr                        m_pX_noC_J_300_l01;
	DQMMonitorElementPtr                        m_pX_noC_J_300_l02;
        DQMMonitorElementPtr                        m_pX_noC_J_300_l03;
        DQMMonitorElementPtr                        m_pX_noC_J_300_l04;
        DQMMonitorElementPtr                        m_pX_noC_J_300_l05;
        DQMMonitorElementPtr                        m_pX_noC_J_300_l06;


	// 2D- Y - I/J MIP hitmaps
        DQMMonitorElementPtr                        m_pY_noC_I_300_l01;
	DQMMonitorElementPtr                        m_pY_noC_I_300_l02;
        DQMMonitorElementPtr                        m_pY_noC_I_300_l03;
        DQMMonitorElementPtr                        m_pY_noC_I_300_l04;
        DQMMonitorElementPtr                        m_pY_noC_I_300_l05;
        DQMMonitorElementPtr                        m_pY_noC_I_300_l06;
        DQMMonitorElementPtr                        m_pY_noC_J_300_l01;
	DQMMonitorElementPtr                        m_pY_noC_J_300_l02;
        DQMMonitorElementPtr                        m_pY_noC_J_300_l03;
        DQMMonitorElementPtr                        m_pY_noC_J_300_l04;
        DQMMonitorElementPtr                        m_pY_noC_J_300_l05;
        DQMMonitorElementPtr                        m_pY_noC_J_300_l06;

        std::string                                 m_geometryFile;
        std::map<int, int>                          ijkmap;
        std::map<int, int>                          chpchnmap;

        std::string                                 m_hotpixelsFilename;

        std::map<int, int>                          hotpixelsmap1;
        std::map<int, int>                          hotpixelsmap2;
        std::map<int, int>                          hotpixelsmap3;
        std::map<int, int>                          hotpixelsmap4;
        std::map<int, int>                          hotpixelsmap5;
        std::map<int, int>                          hotpixelsmap6;
        std::vector<std::map<int, int>>             hotpixelsMap;

	//##########################################################################
	bool                                        m_dumpEvent;

	int goodDAQ;
	int badDAQ;
	bool m_requireDaqQuality;

}; 

} 

#endif  //  Correlations_H
